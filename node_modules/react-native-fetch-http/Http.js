"use strict";
import SendRequest from "./SendRequest";

export default class Http {
  constructor(timeout) {
    this.timeout = timeout || Http.timeout;
  }

  http(request, timeout) {
    return new Promise((resolve, reject) => {
      var sendRequest = new SendRequest(request, timeout);
      return sendRequest
        .sendRequest()
        .then(
          response => {
            if (response.ok) {
              return response.text().then(content => {
                try {
                  content = JSON.parse(content);
                } catch (e) {}
                resolve(content);
              });
            } else {
              reject(response);
            }
          },
          response => {
            reject(response);
          }
        )
        .catch(error => {
          reject(response);
        });
    });
  }

  get(url, prama = {}, headers = {}) {
    var keys = [];
    var headers = new Headers(headers);
    for (var key in prama) {
      if (prama.hasOwnProperty(key)) {
        keys.push(key + "=" + prama[key]);
      }
    }
    if (keys.length) {
      url = url + "?" + keys.join("&");
    }
    var request = new Request(url, {
      method: "get",
      credentials: "include",
      headers
    });
    return this.http(request, this.timeout);
  }

  post(url, prama = {}, headers = {}) {
    var body;
    var headers = new Headers(headers);
    for (let key in prama) {
      body = body || new FormData();
      if (prama.hasOwnProperty(key)) {
        let v = prama[key];
        if (typeof prama[key] == "object" && !prama[key].uri) {
          v = JSON.stringify(prama[key]);
        }
        body.append(key, v);
      }
    }
    var request = new Request(url, {
      method: "post",
      body,
      credentials: "include",
      mode: "FormData",
      headers
    });
    return this.http(request, this.timeout);
  }
}

Http.timeout = 30000;
