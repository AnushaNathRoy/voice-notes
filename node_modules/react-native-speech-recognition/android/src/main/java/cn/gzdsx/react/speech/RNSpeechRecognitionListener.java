package cn.gzdsx.react.speech;

import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.SpeechRecognizer;
import android.util.Log;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.RCTNativeAppEventEmitter;

public class RNSpeechRecognitionListener implements RecognitionListener {
    final String TAG = "SpeechListener";
    String message = "";
    RNSpeechRecognitionDelegate mDelegate;
    RCTNativeAppEventEmitter emitter;

    public RNSpeechRecognitionListener(RNSpeechRecognitionDelegate mDelegate, RCTNativeAppEventEmitter nativeAppEventEmitter) {
        this.mDelegate = mDelegate;
        this.emitter = nativeAppEventEmitter;
    }

    @Override
    public void onReadyForSpeech(Bundle params) {
        //Log.d(TAG, "onReadyForSpeech Start");
    }

    @Override
    public void onBeginningOfSpeech() {
        //Log.d(TAG, "onBeginningOfSpeech Start");
    }

    @Override
    public void onRmsChanged(float rmsdB) {
        //Log.d(TAG, "onRmsChanged Start");
    }

    @Override
    public void onBufferReceived(byte[] buffer) {
        //Log.d(TAG, "onBufferReceived Start");
    }

    @Override
    public void onEndOfSpeech() {
        //Log.d(TAG, "onEndOfSpeech Start");
    }

    @Override
    public void onError(int error) {
        //Log.d(TAG, "onError Start");
        switch (error) {
            case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
                message = "网络链接超时";
                break;
            case SpeechRecognizer.ERROR_NETWORK:
                message = "网络错误或者没有权限";
                break;
            case SpeechRecognizer.ERROR_AUDIO:
                message = "音频发生错误";
                break;
            case SpeechRecognizer.ERROR_CLIENT:
                message = "连接出错";
                break;
            case SpeechRecognizer.ERROR_SERVER:
                message = "服务器出错";
                break;
            case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
                message = "什么也没有听到";
                break;
            case SpeechRecognizer.ERROR_NO_MATCH:
                message = "没有匹配到合适的结果";
                break;
            case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:
                message = "RecognitionService已经启动,请稍后";
                break;
            case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:
                message = "请赋予APP权限,另请（Android6.0以上）确认动态申请权限";
                break;
            default:
                break;
        }

        Log.d(TAG, message);
        WritableMap errMap = Arguments.createMap();
        errMap.putInt("code", error);
        errMap.putString("message", message);
        emitter.emit("onError", errMap);
    }

    @Override
    public void onResults(Bundle results) {
        Log.d(TAG, "onResults Start");
        String key = SpeechRecognizer.RESULTS_RECOGNITION;
        ReadableArray messages = Arguments.fromBundle(results).getArray(key);
        assert messages != null;
        String result = String.valueOf(messages.toArrayList().get(0));
        emitter.emit("onSuccess", result);
        mDelegate.onResult(result);
        //Log.i(TAG, String.valueOf(messages.toArrayList().get(0)));
    }

    @Override
    public void onPartialResults(Bundle partialResults) {
        Log.d(TAG, "onPartialResults Start");
    }

    @Override
    public void onEvent(int eventType, Bundle params) {
        //Log.d(TAG, "onEvent Start");
    }
}
