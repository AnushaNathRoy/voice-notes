export interface SpeechEvents {
    onSpeechStart?: (e: SpeechStartEvent) => void;
    onSpeech?: (e: OnSpeechEvent) => void;
    onSpeechEnd?: () => void;
    onSpeechError?: (e: SpeechErrorEvent) => void;
    onSpeechRecognized?: (e: SpeechRecognizedEvent) => void;
}
export interface SpeechStartEvent {
    sampleRate: number;
    state: number;
}
export interface OnSpeechEvent {
    size: number;
}
export interface SpeechErrorEvent {
    error?: {
        code?: string;
        message?: string;
    };
}
export interface SpeechRecognizedEvent {
    isFinal: boolean;
    transcript: string;
}
declare class GCSpeechToText {
    private readonly _events;
    private _listeners;
    constructor();
    start(): Promise<void>;
    stop(): Promise<void>;
    setApiKey(apiKey: string): void;
    removeListeners(): Promise<void>;
    onSpeechStart(fn: (data: SpeechStartEvent) => void): void;
    onSpeech(fn: (data: OnSpeechEvent) => void): void;
    onSpeechEnd(fn: () => void): void;
    onSpeechError(fn: (error: SpeechErrorEvent) => void): void;
    onSpeechRecognized(fn: (data: SpeechRecognizedEvent) => void): void;
}
declare const _default: GCSpeechToText;
export default _default;
